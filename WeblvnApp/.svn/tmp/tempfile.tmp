# Create your views here.
from django.template import Context,loader
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from Weblvn.WeblvnApp.models import Lvn_entry
from Weblvn.WeblvnApp.models import Wiki_entry
from Weblvn.WeblvnApp.models import Wikientry
from django import forms
from django.db.models import Q
from models import *
import subprocess
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib.sessions.models import Session
from django.core.context_processors import csrf
from django.template import RequestContext
from django.forms.models import modelformset_factory



items_to_show = 15

def insert_form(request):

    form = Wiki_insert_form()
    my_branch = request.GET.get('bname','')
    return render_to_response('insert_form.html',{'form':form,'branch':my_branch})


def save_on_insert(request):

    if request.method == 'POST':
        arg_branch = request.POST.get('brname','')
        my_branch = Branch.objects.get(branch_name=arg_branch)
        my_bfr_lvn = request.POST.get('bfr_lvn','')
        my_rev = request.POST.get('rev_id','')
        my_author = request.POST.get('author','')
        my_adaptation = request.POST.get('adaptation','')
        my_other = request.POST.get('other','')
        
        new_entry = Wiki_entry(bfr_lvn=my_bfr_lvn,branch_name=my_branch,rev_id=my_rev,author=my_author,adaptation=my_adaptation,other=my_other)
        print new_entry
        new_entry.save()
    return HttpResponseRedirect('/lvnaffectingtable/')




def manage_wiki_entries(request):
    my_branch = request.GET.get('branch_name', 'tmp')
    print 'my branch is: ', (my_branch)
    wikiFormset= modelformset_factory(Wiki_entry, extra=0, exclude=('branch_name'), form=Wikientry)
    formset = wikiFormset(queryset=Wiki_entry.objects.filter(branch_name=my_branch))
    for form in formset:
        print form.as_table()
    return render_to_response('manage_wiki_entries.html',  {'entries':formset, 'branch':my_branch})


def add_csrf(request, **kwargs):
    d = dict(branch=request.branch_name, **kwargs)
    d.update(csrf(request))
    return d


def clean_session_data(request):
     print 'before cleaning'
     request.session.clear()
     print 'after cleaning' 


class author_commits_form(forms.Form):
    author = forms.CharField()
    branch = forms.ModelChoiceField(queryset=Branch.objects.all(), empty_label='all')
     

def search_author_commits(request):
    form = author_commits_form()
    clean_session_data(request)
    print 'in search form request'
    return render_to_response('search_author_commits.html', {
        'form': form,
    })


def listing(request, page_index=1):
    page_index = int(request.GET.get('page', '1'))


    my_author = request.GET.get('author', 'tmp')
    my_branch = request.GET.get('branch', 'tmp')

    print 'start branch id is :', (my_branch)
    print 'start author is :', (my_author)    

    print '-----entering func listing -----'
    print '--- with the following values --'
    print 'page ', '%d', page_index
    print 'author and branch', '%s %s', my_author, my_branch
 
    if page_index > 1:
        gauthor = request.session["author"]
        gbranch = request.session["branch"]
    else:  #first page
        if 'author' not in request.session and 'branch' not in request.session: 
            print 'first time to visit page 1'
            if not my_author:
                msg_txt = 'Incorrect name for author. Please provide a name to try again'
                return render_to_response('message.html',{'msg': msg_txt, 'return_to':'/search-author-commits/'})                
            else: 
                request.session['author'] = my_author
                request.session['branch'] = my_branch
                gauthor = request.session["author"]
                gbranch = request.session["branch"]
        else:
            print 'page 1 but not first time'
            if my_author == 'tmp' and my_branch == 'tmp':
                gauthor = request.session["author"]
                gbranch = request.session["branch"]
            else:
                request.session['author'] = my_author
                request.session['branch'] = my_branch
                gauthor = request.session["author"]
                gbranch = request.session["branch"]
                print 'start a new search using the back button in browser...'

#                msg_txt = 'You should not not use back buttons for a new search'
#                return render_to_response('message.html',{'msg': msg_txt, 'return_to':'/search-author-commits/'})                


#    else:
#        msg_txt = 'If you want to conduct another search use the links provied not the back button. Otherwise you will work with stale data'
#        return render_to_response('message.html',{'msg': msg_txt, 'return_to':'/search-author-commits/'})
                   

    print 'session branch id is :', (gbranch)
    print 'session author is :', (gauthor)    
    print 'start branch id is :', (my_branch)
    print 'start author is :', (my_author)    

#    global gauthor
#    global gbranch 
#    print 'starting global branch id is :', (gbranch)
#    print 'starting global author is :', (gauthor)    
       
    
    author = '%'+gauthor+'%'
    lvn_ret=[]
    for lvn_entry in Lvn_entry.objects.raw('select distinct author, id from weblvnapp_lvn_entry where author like %s group by author', [author]):
        lvn_ret.append(lvn_entry)
        print lvn_entry.author
    authors_found = len(lvn_ret)
         
    print gauthor, str(authors_found)
    if authors_found > 1:
        msg_txt = 'Found: '+ str(authors_found) +' authors with a name like : ' + gauthor + '. Narrow your search and try again'
            #msg_txt = 'Found: more than one authors. Narrow your search and try again'
        return render_to_response('multiple_authors_list.html',{'lvn_ret': lvn_ret, 'msg': msg_txt, 'return_to':'/search-author-commits/'})
    else:
        if authors_found == 0:
            msg_txt = 'No such author found. Please try again'
            return render_to_response('message.html',{'msg': msg_txt, 'return_to':'/search-author-commits/'})
          

    print '----------------' 
    print 'final lvn entry author is :', (lvn_entry.author)
#    global gauthor
#    gauthor=lvn_entry.author
#    my_author = gauthor
    gauthor = lvn_entry.author  
    request.session["author"] = gauthor
    
    print '===================' 

    if gbranch:
        print 'at here 1'  
        branch_name=Branch.objects.get(pk=gbranch)
        author_list = Lvn_entry.objects.filter(author=gauthor, branch_name=branch_name).order_by('branch_name', '-rev_id')
    else:
        print 'at here 2'  
        author_list = Lvn_entry.objects.filter(author=gauthor).order_by('branch_name', '-rev_id')
 
#    from django.db.models import Q
#    author_list = Lvn_entry.objects.filter(author=my_author,branch_name=branch_name).order_by('branch_name', '-rev_id')
    
    for lvn in author_list:
      print gauthor, lvn.lvn, lvn.branch_name, lvn.rev_id
    paginator = Paginator(author_list, items_to_show) # show 5 items per page

    print 'entries found: ', (paginator.count)
    
    #print 'received page at point 3 = ', (page_index)
    try:
        authorslist = paginator.page(page_index)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        authorslist = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        authorslist = paginator.page(paginator.num_pages)

    return render_to_response('author_commits_list.html', {"authorslist": authorslist, 'author': gauthor, 'entries': str(len(author_list))})


def main(request):
    last_upd=[]
    for lupd in DBUpdate.objects.all():
      last_upd.append(lupd)  
      print lupd.lastUpdDate		
    return render_to_response('main.html', {'last_upd':last_upd})

def search_current(request):
    lvn_ret=[]
    for lvn_entry in Lvn_entry.objects.raw('select max(lvn), branch_name_id, author, rev_id, commit_date, id from weblvnapp_lvn_entry group by branch_name_id order by branch_name_id desc'):
        lvn_ret.append(lvn_entry)
        print lvn_entry.lvn, lvn_entry.branch_name, lvn_entry.author
    return render_to_response('search_current_lvn_results.html', {'lvn_ret':lvn_ret})

class Lvn_entry_current_form(forms.Form):
      pass

def search_current_lvn(request):
    form = Lvn_entry_current_form()
    return render_to_response('search_current_lvn.html', {'form':form,})


class Lvn_entry_form(forms.Form):

    lvn = forms.IntegerField()
    #revision = forms.IntegerField()
    #author = forms.CharField()
    branch = forms.ModelChoiceField(queryset=Branch.objects.all(), empty_label='all')
 

def search_lvn(request):
    form = Lvn_entry_form()
    return render_to_response('search_lvn.html', {
        'form': form,
    })


class Revision_entry_form(forms.Form):

    revision = forms.IntegerField()


def changedrevision(request):

    form = Revision_entry_form()
    return render_to_response('search_for_revision.html', {
        'form': form,
    })




def lvn_affecting_table(request):

    form = Wiki_form()#this Class is defined in models.py instead of views.py.This is better approach.
    return render_to_response('lvn_affecting_table.html',{'form':form,

    })    




#validate the first form --check if a valid number is submitted in the lvn field
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

def unique(inlist):
    blind_unique = []
    uniques = []
    for item in inlist:
        if item.branch_name not in blind_unique:
            blind_unique.append(item.branch_name)
            uniques.append(item)
    return uniques










###########################################################################################

def uniqueLvn(request):
    
    arg_lvn = request.GET['lvn']
    arg_branch = request.GET['branch']
    

  #### code for input validation ####

    if len(arg_lvn)==0 and len(arg_branch)>0:


        qs = []
        qs.append(Q(branch_name__id=arg_branch))
        qry =  Q()
        for q in qs:
            qry = qry & q
        branch_set = Lvn_entry.objects.filter(qry)[:1]
        cmd = "ls my_media/isu_compact/*|grep "+str(branch_set[0].branch_name)+'.'+'txt'+" |awk -F: '{print $1}'|awk -F/ '{print $NF}'"
       
        output = []
        p = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
        output = p.communicate()[0].strip()
       
        return render_to_response('search_results.html', {
        'branch_set':output  
       })

                 

#return the page.txt here
   
    elif len(arg_lvn) == 0 and len(arg_branch) == 0:#if len(arg_branch) == 0 means that we choose the 'all' option in the drop-down menu
            return render_to_response('message.html',{'msg':'Please narrow your search by using a specific branch','return_to':'/search-lvn/'})

    else:
        if len(arg_lvn)>0:
           
           val = is_number(arg_lvn)
           if val == False:
               return render_to_response('message.html',{'msg': 'Please provide a valid number in the LVN field', 'return_to':'/search-lvn/'})
           else:
           
                qs = []
                #if len(arg_lvn)>0:
                qs.append(Q(lvn=arg_lvn))
                if len(arg_branch)>0 and arg_branch!='all':
                    qs.append(Q(branch_name__id=arg_branch))

                qry = Q()
                for q in qs:
                    qry = qry & q
                lvn_set = Lvn_entry.objects.filter(qry)


                if lvn_set:#django returns the unique lvn(changed) per branch
                    my_set = unique(lvn_set)
                    tmp_qs = []
                    for item in my_set:
                        branch_obj = Branch.objects.filter(Q(branch_name=item.branch_name))
                        tmp_qs.append(branch_obj[0].bfr_id) ####### branch_obj is a list and not an object.so i operate on the first item on this list.
                    f_list = zip(my_set,tmp_qs) 

        ######  code here for LVN change reason output   #######
                    change_reason = []
                    for el in f_list:
                        cmd = "ls my_media/lvn_change/*|grep "+str(el[1])+'_'+str(el[0].lvn)+'.'+'txt'+" |awk -F: '{print $1}'|awk -F/ '{print $NF}' 2>/dev/null"
                        p = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
                        outp = p.communicate()[0].strip()
           
                        change_reason.append(outp)
                    f_list1 = zip(f_list,change_reason)  
       
                    return render_to_response('search_results.html', {
       'lvn_set': my_set , 'bfr_set':tmp_qs , 'f_set': f_list, 'f_set1':f_list1  
       })

                else:
                    if not lvn_set:
    
                        return render_to_response('message.html',{'msg': 'There is not such LVN in the branches.Try again', 'return_to':'/search-lvn/'})

    #else:
       # if lvn_set and len(arg_lvn)==0:
            



################################################################################################







def find_revision_change(request):

    
    arg_revision = request.GET['revision']
    print arg_revision   

  #### code for input validation ####

    val = is_number(arg_revision)
    if val == False:
        return render_to_response('message.html',{'msg': 'Please provide a valid number in the revision field','arg_rev':arg_revision, 'return_to':'/changedrevision/'})
        
    qs = []
    if len(arg_revision)>0:
        qs.append(Q(rev_id=arg_revision))
   # if len(arg_branch)>0 and arg_branch!='all':
    #    qs.append(Q(branch_name__id=arg_branch))

    qry = Q()
    for q in qs:
        qry = qry & q
    revision_set = Lvn_entry.objects.filter(qry)

    if revision_set and len(arg_revision)>0:#django returns if this commit(revision number)caused LVN change
        #my_set = unique(lvn_set)
        for item in revision_set:
            if item.layout_rev == item.rev_id:
                return render_to_response('search_results_revision.html', {
       'revision_set': revision_set,'arg_rev':arg_revision      })
            else:
                  return render_to_response('message.html',{'msg': 'This commit did not cause LVN change in any branch', 'return_to':'/changedrevision/','revision_set':revision_set,'arg_rev':arg_revision })

    elif not revision_set:
        return render_to_response('message.html',{'msg': 'This commit is not made in code or it does not exist yet.', 'return_to':'/changedrevision/','arg_rev':arg_revision })
